int func(int target , const vector<int> &fill , const vector<int> &cost , int i , vector<vector<int>> &dp)
{
   
    if(target==0)
    {
        return 0;
    }
   
    if(i>=fill.size())
    {
        return 1e9;
    }
   
    if(dp[i][target]!=1e9)
    {
        return dp[i][target];
    }
   
    int take=1e9;
   
    int leave=func(target , fill , cost , i+1 , dp );
   
    if(target-fill[i]>=0)
    {
        take = cost[i] + func(target-fill[i] , fill , cost , i , dp );
    }
   
    return dp[i][target]=min(take , leave);
}


int Solution::solve(const vector<int> &eat, const vector<int> &fill, const vector<int> &cost) {
   
   
     int target=*max_element(eat.begin() , eat.end());
     
     int n=fill.size();
     
     vector<vector<int>> dp(1005 , vector<int>(1005 , 1e9));
     
 
   
    int res=0;
   
    for(int i=0;i<eat.size();i++)
    {
        res+= func(eat[i] , fill , cost , 0 , dp );
    }
   
    return res;
}
